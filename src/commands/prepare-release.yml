# Copyright (c) 2018, salesforce.com, inc.
# All rights reserved.
# SPDX-License-Identifier: BSD-3-Clause
# For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause

# How to author commands: https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands
description: >
  Use standard-version to prepare a release (version bump, git tag, changelogs)

parameters:
  dryrun:
    description: if true, the command will run but will not publish to npm or push to git
    default: false
    type: boolean

steps:
  - jq/install
  - install-standard-version
  - configure-github
  - run:
      name: Prepare npm package release
      command: |
        PKG_NAME=$(cat package.json | jq -r .name)
        PKG_VERSION=$(cat package.json | jq -r .version)
        VERSIONS=$(npm view $PKG_NAME versions --json | jq .)

        DRY_RUN=''
        if [ <<parameters.dryrun>> = true ]; then
            DRY_RUN='--dry-run'
        fi

        # Searches array of versions for one that matches the version we're attempting to publish in the job
        # If the version already exists, MATCHING_VERSIONS will be >= 1 otherwise it will be 0
        MATCHING_VERSIONS=$(echo $VERSIONS | jq "map(select(. == \"${PKG_VERSION}\")) | length")
        if (( $MATCHING_VERSIONS == 0 )); then
            echo "${PKG_NAME}@${PKG_VERSION} does not exist in the registry. Assuming that we want to publish that version"
            standard-version $DRY_RUN --release-as $PKG_VERSION --commit-all --releaseCommitMessageFormat="chore(release): {{currentTag}} [ci skip]"
        else
            echo "${PKG_NAME}@${PKG_VERSION} exists in the registry. Using standard-version to bump to the next version"
            standard-version $DRY_RUN --commit-all --releaseCommitMessageFormat="chore(release): {{currentTag}} [ci skip]"
        fi

        if [ <<parameters.dryrun>> = false ]; then
            git push --follow-tags origin $CIRCLE_BRANCH
        fi
