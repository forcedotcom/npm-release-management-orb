# Copyright (c) 2018, salesforce.com, inc.
# All rights reserved.
# SPDX-License-Identifier: BSD-3-Clause
# For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause

# How to author commands: https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands
description: >
  Publish npm package

parameters:
  tag:
    description: tag used to publish to npm
    default: latest
    type: string
  access:
    description: tells the registry whether this package should be published as public or restricted
    default: public
    type: enum
    enum: [public, restricted]
  use_tarfile:
    description: publishes the tar file in directory if set to true
    default: false
    type: boolean

steps:
  - jq/install
  - run:
      name: Set npm credentials
      command: |
        echo //registry.npmjs.org/:_authToken=$NPM_TOKEN > /root/.npmrc
        echo unsafe-perm = true >> /root/.npmrc
  - when:
      condition:
        not: <<parameters.use_tarfile>>
      steps:
        - run:
            name: Publish npm package
            command: npm publish --tag <<parameters.tag>> --access <<parameters.access>>
  - when:
      condition: <<parameters.use_tarfile>>
      steps:
        - run:
            name: Publish npm package
            command: |
              PKG_VERSION=$(cat package.json | jq -r .version)
              TARFILE=$(ls | grep $PKG_VERSION.tgz)
              echo "publishing to npm using ${TARFILE}"
              npm publish $TARFILE --tag <<parameters.tag>> --access <<parameters.access>>
        - run:
            name: Wait for version to become available on npm
            command: |
              PKG_VERSION=$(cat package.json | jq -r .version)
              PKG_NAME=$(cat package.json | jq -r .name)

              MAX_TRIES=300
              TRIES=0
              until (($(npm view $PKG_NAME versions --json | jq "map(select(. == \"$PKG_VERSION\")) | length") > 0)) || (($TRIES >= $MAX_TRIES )); do
                  printf '.'
                  sleep 1
                  TRIES=$((TRIES+1))
              done

              if (($TRIES >= $MAX_TRIES)); then
                  echo "Timeout waiting for tag. Exiting job"
                  exit 1
              fi
