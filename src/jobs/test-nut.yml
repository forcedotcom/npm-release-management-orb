# Copyright (c) 2018, salesforce.com, inc.
# All rights reserved.
# SPDX-License-Identifier: BSD-3-Clause
# For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause

description: >
  Runs NUTs for package.  Set environment: TESTKIT_EXECUTABLE_PATH:whatever to use an executable besides bin/run

parameters:
  node_version:
    description: version of node to run tests against
    type: string
    default: 'latest'
  os:
    description: operating system to run tests on
    type: enum
    enum: ['linux', 'windows']
    default: 'linux'
  sfdx_version:
    description: 'By default, the latest version of the standalone CLI will be installed. To install via npm, supply a version tag such as "latest" or "6".'
    default: ''
    type: string
  sfdx_executable_path:
    description: "Path to sfdx executable to be used by NUTs, defaults to ''"
    default: ''
    type: string
  npm_module_name:
    description: "The fully qualified npm module name, i.e. @salesforce/plugins-data, defaults to ''"
    default: ''
    type: string
  repo_tag:
    description: "The tag of the module repo to checkout, '' defaults to branch/PR"
    default: ''
    type: string
  size:
    type: enum
    description: |
      The size of machine resource to use. Defaults to medium.
    default: medium
    enum:
      - medium
      - large
      - xlarge
      - 2xlarge
  command:
    description: 'Custom command that runs NUTs.  By default, yarn test:nuts'
    default: 'yarn test:nuts'
    type: string
  use-cache:
    description: 'Do not load or save cache'
    type: boolean
    default: true

executor:
  name: << parameters.os >>
  size: << parameters.size >>

environment:
  TESTKIT_EXECUTABLE_PATH: <<parameters.sfdx_executable_path>>

steps:
  - install-node:
      version: <<parameters.node_version>>
      os: <<parameters.os>>
  - install-sfdx:
      version: <<parameters.sfdx_version>>
      os: <<parameters.os>>
  - checkout
  - when:
      condition:
        and:
          - equal: ['windows', <<parameters.os>>]
          - <<parameters.repo_tag>>
      steps:
        - run:
            name: Switch to tag v<<parameters.repo_tag>> or <<parameters.npm_module_name>>@<<parameters.repo_tag>>
            command: |
              git checkout "v<<parameters.repo_tag>>"
              if (!$?)
              {
                git checkout "<<parameters.npm_module_name>>@<<parameters.repo_tag>>"
              }
  - when:
      condition:
        and:
          - equal: ['linux', <<parameters.os>>]
          - <<parameters.repo_tag>>
      steps:
        - run:
            name: Switch to tag v<<parameters.repo_tag>> or <<parameters.npm_module_name>>@<<parameters.repo_tag>>
            command: git checkout v<<parameters.repo_tag>> || git checkout <<parameters.npm_module_name>>@<<parameters.repo_tag>>
  - when:
      condition:
        or:
          - equal: ['windows', <<parameters.os>>]
          - equal: [false, <<parameters.use-cache>>]
      steps:
        - run:
            name: Dedupe dependencies
            command: npx -y yarn-deduplicate
        - run:
            name: Install dependencies
            command: yarn
        - run:
            name: Build
            command: yarn build
  - when:
      condition:
        and:
          - equal: ['linux', <<parameters.os>>]
          - equal: [true, <<parameters.use-cache>>]
      steps:
        - restore_cache:
            keys:
              - v6-npm-{{ .Branch }}-{{checksum "yarn.lock"}}
              - v6-npm-{{ .Branch }}
              - v6-npm
        - run:
            name: Dedupe dependencies
            command: npx -y yarn-deduplicate
        - run:
            name: Install dependencies
            command: yarn
        - run:
            name: Build
            command: yarn build
        - save_cache:
            key: v6-npm-{{ .Branch }}-{{checksum "yarn.lock"}}
            paths:
              - node_modules
              - ~/node_modules
              - ~/.cache/yarn
              - ~/.config/yarn
        - save_cache:
            key: v6-npm-{{ .Branch }}
            paths:
              - node_modules
              - ~/node_modules
              - ~/.cache/yarn
              - ~/.config/yarn
        - save_cache:
            key: v6-npm
            paths:
              - node_modules
              - ~/node_modules
              - ~/.cache/yarn
              - ~/.config/yarn
        - verify-installed-plugin
        - run:
            name: set TESTKIT_ENABLE_ZIP for artifacts on linux
            command: |
              echo "export TESTKIT_ENABLE_ZIP=true" >> $BASH_ENV
  - run:
      name: Create artifact dir
      command: |
        mkdir artifacts
  - run:
      name: Nuts
      command: |
        echo "Using node: $(node --version)"
        echo "Environment Variables:"
        env
        << parameters.command >>
      # this is in the command instead of the circle project environment to prevent it from happening on windows
  - store_artifacts:
      path: artifacts
