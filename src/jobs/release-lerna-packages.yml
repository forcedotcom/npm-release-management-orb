# Copyright (c) 2018, salesforce.com, inc.
# All rights reserved.
# SPDX-License-Identifier: BSD-3-Clause
# For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause

description: >
  Publishes npm package
  The following environment variables are always required:
    - NPM_TOKEN
  The following environment variables are required if signing:
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - SALESFORCE_KEY
  The following environment variables are required if creating a github release:
    - GH_TOKEN

parameters:
  tag:
    description: tag used to publish to npm
    default: latest
    type: string
  sign:
    description: space separated list of packages you want signed (must be relative to the root dir, e.g. packages/my-package)
    default: ""
    type: string
  dryrun:
    description: if true, the job will run but will not publish to npm or push to git
    default: false
    type: boolean
  post-job-steps:
    description: steps that you want to run after the job has finished running (if dryrun is set to false, these steps will be skipped)
    type: steps
    default: []
  github-release:
    description: if true, job will create a release in github
    type: boolean
    default: false

executor: linux

steps:
  - checkout
  - install-sfdx-trust
  - install-sf-release
  - install-standard-version
  - configure-github
  - restore_cache:
      keys:
        - v3-npm-{{ .Branch }}-{{checksum "yarn.lock"}}
        - v3-npm-{{ .Branch }}
        - v3-npm
  - run:
      name: Install dependencies
      command: yarn
  - run:
      name: Build
      command: yarn build
  - save_cache:
      key: v3-npm-{{ .Branch }}-{{checksum "yarn.lock"}}
      paths:
        - node_modules
        - ~/node_modules
        - ~/.cache/yarn
        - ~/.config/yarn
  - save_cache:
      key: v3-npm-{{ .Branch }}
      paths:
        - node_modules
        - ~/node_modules
        - ~/.cache/yarn
        - ~/.config/yarn
  - save_cache:
      key: v3-npm
      paths:
        - node_modules
        - ~/node_modules
        - ~/.cache/yarn
        - ~/.config/yarn

  # - if environment looks like it is prepped to do change cases, and we're on "latest" tag
  - when:
      condition:
          equal: ['latest', <<parameters.tag>>]
      steps:
        - install-change-case-mgmt
        - change-case-create

  # when dryrun is true: publish with --dryrun flag
  - when:
      condition: <<parameters.dryrun>>
      steps:
        - run:
            name: Release Dryrun
            command: sf-release npm:lerna:release --dryrun --no-install --npmtag "<<parameters.tag>>"

  # when dryrun is false and sign is true: sign and publish package
  - when:
      condition:
        and:
          - not: <<parameters.dryrun>>
          - not: <<parameters.github-release>>
          - <<parameters.sign>>
      steps:
        - run:
            name: Sign and Release
            command: sf-release npm:lerna:release --sign <<parameters.sign>> --no-install --npmtag "<<parameters.tag>>"

  # when dryrun is false and sign is true and github-release is true: sign and publish package and create github release
  - when:
      condition:
        and:
          - not: <<parameters.dryrun>>
          - <<parameters.sign>>
          - <<parameters.github-release>>
      steps:
        - run:
            name: Sign and Release
            command: sf-release npm:lerna:release --sign <<parameters.sign>> --no-install --npmtag "<<parameters.tag>>" --githubrelease

  # when dryrun is false and sign is false: publish package
  - when:
      condition:
        and:
          - not: <<parameters.dryrun>>
          - not: <<parameters.sign>>
          - not: <<parameters.github-release>>
      steps:
        - run:
            name: Release
            command: sf-release npm:lerna:release --no-install --npmtag "<<parameters.tag>>"

  # when dryrun is false and sign is false and github-release is true: publish package and create github release
  - when:
      condition:
        and:
          - not: <<parameters.dryrun>>
          - not: <<parameters.sign>>
          - <<parameters.github-release>>
      steps:
        - run:
            name: Release
            command: sf-release npm:lerna:release --no-install --npmtag "<<parameters.tag>>" --githubrelease

  # when dryrun is false: run post-job-steps
  - when:
      condition:
        not: <<parameters.dryrun>>
      steps: <<parameters.post-job-steps>>

  # clean up the CTC cases
  - when:
      condition:
        equal: ['latest', <<parameters.tag>>]
      steps:
        - run:
            when: on_fail
            name: Close CTC case as Not Implemented
            command: |
              if [ -z "${SF_CHANGE_CASE_SFDX_AUTH_URL}" ] || [ -z "${SF_CHANGE_CASE_TEMPLATE_ID}" ] || [ -z "${SF_CHANGE_CASE_SCHEDULE_BUILD}" ]; then
                  echo "Environment not configured for CTC"
              else
                  sfchangecase close --location "https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME" --status "Not Implemented"
              fi
        - run:
            name: All Good! Close CTC case/implementations
            when: on_success
            command: |
              if [ -z "${SF_CHANGE_CASE_SFDX_AUTH_URL}" ] || [ -z "${SF_CHANGE_CASE_TEMPLATE_ID}" ] || [ -z "${SF_CHANGE_CASE_SCHEDULE_BUILD}" ]; then
                  echo "Environment not configured for CTC"
              else
                  sfchangecase close --location "https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
              fi
